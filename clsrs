#!/usr/bin/node

var fs = require ('fs');
var constants = require ('./constants');
var boxConfig = require ('./boxConfig');
//var commandLineParser = require ('./commandLineParser');
//var gitConfig = require ('./gitConfig');
//var prompt = require ('./prompt');
var exec = require ('child_process').exec;
//var auxlib = require ('./auxlib');
var app = require ('./app');

app.start ();

/*constants.DEBUG && console.log ('constants = ');
constants.DEBUG && console.log (constants);

constants.DEBUG && console.log ('boxConfig = ');
constants.DEBUG && console.log (boxConfig);

var command = commandLineParser.parse ();

constants.DEBUG && console.log ('command = ');
constants.DEBUG && console.log (command);*/



/*var deckFile = command.use;
var now = +new Date ();*/

/*
Use deck
*/
/*fs.readFile (deckFile, function (err, data) {
    if (err) throw err;
    var deck = JSON.parse (data);
    var newDeck = [];

    constants.DEBUG && console.log ('deck = ');
    constants.DEBUG && console.log (deck);
    // filter out cards that aren't ready to be read
    var deck = deck.filter (function (elem) {
       constants.DEBUG && console.log ('now - elem.lastAsked = ');
       constants.DEBUG && console.log (now - elem.lastAsked);
        if (now - elem.lastAsked > boxConfig[elem.box]) 
            return true;
        else
            newDeck.push (elem);
    });

    prompt.start ();

    // cycle through deck 
    var getAnswer = function getAnswer (cards, response) {
        constants.DEBUG && console.log ('response = ');
        constants.DEBUG && console.log (response);
        if (response) { // check response
            var card = cards[0];
            if (response == card.a) {
                console.log ('Correct');
                card.box++;
            } else {
                console.log (
                    'Incorrect \n' +
                    'The correct answer is ' + cards[0].a + '\n'
                );
                card.box = 0;
            }
            card.lastAsked = +new Date ();
            newDeck.push (card);
            cards = cards.slice (1);
        }

        if (!cards.length) { // finished deck
            constants.DEBUG && console.log (newDeck);
            console.log ('Deck complete\n');
            fs.writeFile (deckFile, JSON.stringify (newDeck));
            exec ('git commit -a -m "new deck version" ' + deckFile);
            return;
        }

        var q = cards[0].q; // ask question
        console.log (q);
        prompt.get ([ { name: 'answer' } ], function (err, response) {
            getAnswer (cards, response.answer);
        });
    };

    constants.DEBUG && console.log ('deck = ');
    constants.DEBUG && console.log (deck);
    getAnswer (deck);
});*/


