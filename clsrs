#!/usr/bin/node

var fs = require ('fs');
var prompt = require ('prompt');
prompt.message = '';
prompt.delimiter = '';

// config command line parser
var commandLine = (function (that) {
    var CommandLine = require ('node-commandline').CommandLine;
    var commandLine = new CommandLine (process.argv[1].match (/\w+$/));
    commandLine.addArgument ('h'); // help flag
    commandLine.addArgument ('use', { // use deck
        type: 'string',
        sequenced: true
    });
    return commandLine;
}) (this);

// parse command line options
try {
    var command = commandLine.parse.apply (commandLine, process.argv);
} catch (e) {
    console.log ('Usage: ' + commandLine.toString ());
}

console.log ('command = ');
console.log (command);

if (command.h || !command.use) {
    console.log ('Usage: ' + commandLine.toString ());
    process.exit ();
}

var deckFile = command.use;

fs.readFile (deckFile, function (err, data) {
    if (err) throw err;
    var deck = JSON.parse (data);

    prompt.start ();

    var getAnswer = function getAnswer (cards, response) {
        console.log ('response = ');
        console.log (response);
        if (response) {
            if (response === cards[0].a) {
                console.log ('Correct');
            } else {
                console.log (
                    'Incorrect \n' +
                    'The correct answer is ' + cards[0].a + '\n'
                );
            }
            cards = cards.slice (1);
            if (!cards.length) return;
        }
        var q = cards[0].q;
        console.log (q);
        prompt.get ([ { name: 'answer' } ], function (err, response) {
            getAnswer (cards, response.answer);
        });
    };

    console.log ('deck = ');
    console.log (deck);
    getAnswer (deck);

});


